version: 2

aliases: &build
  environment:
    BASH_ENV: "~/.nix-profile/etc/profile.d/nix.sh"

  machine: true

  parallelism: 2

  steps:
    - checkout

    - run:
        name: create a fake /nix
        command: sudo mkdir -m 0755 /nix

    # Restore the nix installation to its state after the previous test run.
    # This should prevent unnecessary rebuilds of dependencies without impacting
    # the tests themselves.

    - restore_cache:
        keys:
          - nix-root-v1-{{ arch }}-{{ checksum "build.nix" }}

    - restore_cache:
        keys:
          - nix-dotnix-v1-{{ arch }}-{{ checksum "build.nix" }}

    - run:
        name: install nix
        command: |
          [[ -d ~/.nix-defexpr ]] ||
          curl https://nixos.org/releases/nix/nix-2.2.1/install | sh

    - run:
        name: install nix dependencies used in the test script itself
        command: |
          nix-env -i cabal2nix
          nix-env -i nix-prefetch-git

    - run:
        name: run the tests
        command: nix-shell --run 'cabal new-test haskell-overridez-tests'

    # Save /nix and the nix user folders to the cache.

    - save_cache:
        key: nix-root-v1-{{ arch }}-{{ checksum "build.nix" }}
        paths:
          - /nix

    - save_cache:
        key: nix-dotnix-v1-{{ arch }}-{{ checksum "build.nix" }}
        paths:
          - ~/.nix-profile
          - ~/.nix-defexpr

jobs:
  build: *build
