#!/usr/bin/env bash
set -euo pipefail

KNOWN_OPTS="doJailbreak dontCheck dontHaddock"

haskell-overridez() {
    OPTIND=1
    local working_dir=$(pwd)
    local just_show_usage=0
    local next_func=_save_cabal2nix
    local opt
    while getopts ":igdlho:" opt;
    do
        case $opt in
            o)
                working_dir=$OPTARG
                ;;
            h)
                just_show_usage=1
                ;;
            d)
                next_func=_delete_if_present
                ;;
            g)
                next_func=_save_github_json
                ;;
            i)
                next_func=_init_project
                ;;
            l)
                next_func=_list_overrides
                ;;
            \?)
                >&2 echo "Invalid option: -$OPTARG"
                >&2 echo
                >&2 _show_usage
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    for arg_func in _save_github_json _delete_if_present _save_cabal2nix
    do
        (( $# == 0 )) && [[ $next_func == $arg_func ]] && just_show_usage=1
    done
    (( $just_show_usage == 1 )) && _show_usage && return 0
    _pushd_wd $working_dir
    trap 'popd > /dev/null' INT TERM EXIT
    $next_func "$@"
    return 0
}

_pushd_wd() {
    local working_dir=$1
    [[ -d ${working_dir} ]] || mkdir -p ${working_dir}
    pushd ${working_dir} > /dev/null
}

_show_usage() {
    cat <<EOF
haskell-overridez - manage nix overrides for haskell packages

It adds a file to the nix subdirectory of a project containing either the
'prefetch' json or the nix expression output of cabal2nix describing the
target haskell package

These files are used by the functions of the accompanying nix-expr library to
create an override function that combines all the specified overrides.

Usage:
  haskell-overridez -i
    # Initialize the project: this simply adds nix/haskell-overridez.nix
    # to simplify the changes needed to default.nix

  haskell-overridez [-g <username/project> [<revision>]]
    # Adds the override as a json file describing the git repo of the package

  haskell-overridez <any://uri/that/works/with/cabal2nix> [cabal2nix opts]
    # Adds the override as nix expression for a haskell package
    # Any additional args are passed to cabal2nix as flags

  haskell-overridez [-d <project-name>]
    # Delete the 'project-name' override file if present

  haskell-overridez [-o <target-dir> ] ...
    # Write output files under target-dir instead of the current working dir

  haskell-overridez -l
    # List all the saved overrides

  haskell-overridez -h
    # Show this help message

  HOZ_OPTS=<option-name-1>:<option-name-2> haskell-overridez ...
    # Apply one of the recognized cabal options when using the override
    #
    # The recognized cabal options are:
    #  doJailbreak:   ignore any incorrect dependency bounds
    #  dontCheck:     don't run the package's tests
    #  dontHaddock:   don't build the package documentation

Examples:

  haskell-overridez https://github.com/tathougies/beam --subpath beam-core
    # Install add the beam-core package

  haskell-overridez -g reflex-frp/reflex-dom-contrib
    # Install add the reflex-dom-contrib package

  HOZ_OPTS=doJailbreak:noCheck haskell-overridez -g reflex-frp/reflex-dom
    # Adds reflex-dom, ignoring bounds checks without running its tests

EOF
}

_delete_if_present() {
    local project=${1:-''}
    [[ -z $project ]] && { >&2 _show_usage; return 1; }
    local github_file="$(pwd)/nix/git-json/${project}.json"
    local cabal2nix_file="$(pwd)/nix/nix-expr/${project}.nix"
    [[ -f ${github_file} ]] && rm ${github_file} && _echo "removed github json for $project"
    [[ -f ${cabal2nix_file} ]] && rm ${cabal2nix_file}  && _echo "removed nix-expr for $project"
    _maybe_remove_option $project
    return 0
}

_init_project() {
    local out="$(pwd)/nix/haskell-overridez.nix"
    [[ -f $out ]] && return 0;
    local archive_url="https://github.com/adetokunbo/haskell-overridez/archive/master.tar.gz"
    local the_hash=$(nix-prefetch-url --unpack ${archive_url})
    _ensure_parent_dir $out
    (cat <<EOF
let
  pkgs = import <nixpkgs> {};
  overridez = fetchTarball {
    url = "${archive_url}";
    sha256 = "${the_hash}";
  };
in
  import overridez { inherit pkgs; }
EOF
    ) > $out
}

_save_github_json() {
    local project=${1:-''}
    [[ -z $project ]] && { >&2 _show_usage; return 1; }
    local revision=${2:-''}
    local url="https://github.com/${project}.git"
    local out="$(pwd)/nix/git-json/${project##*/}.json"
    _ensure_parent_dir $out
    _init_project
    _echo "cmd is nix-prefetch-git $url $revision"
    nix-prefetch-git $url $revision > $out && {
        _echo "saved github json for ${project} to ${out}"
        _maybe_add_options $project
    }
}

_save_cabal2nix() {
    local pkg_uri=${1:-''}
    shift
    [[ -z $pkg_uri ]] && { >&2 _show_usage; return 1; }
    _echo "cmd is cabal2nix $pkg_uri $@"
    [[ $pkg_uri =~ "cabal://" ]] && { _save_cabal2nix_cabal_uri $pkg_uri "$@"; return 0; }
    local nix_expr_tmp=$(mktemp -q)
    trap "rm $nix_expr_tmp" INT TERM EXIT
    cabal2nix $pkg_uri "$@" > $nix_expr_tmp
    local project=$(cat $nix_expr_tmp | grep 'pname' | sed -e 's/.*pname = "\(.*\)".*/\1/')
    local out="$(pwd)/nix/nix-expr/${project}.nix"
    _ensure_parent_dir $out
    _init_project
    cp $nix_expr_tmp $out
    _echo "saved nix-expr for ${project} to ${out}"
    _maybe_add_options $project
}

_save_cabal2nix_cabal_uri() {
    local pkg_uri=${1:-''}
    shift
    [[ -z $HOZ_ALL_CABAL_HASHES:-'' ]] && return 1;
    local full_id=${pkg_uri##cabal://}

    # NOTE: search_path finds _a_ version if none is specified, but not the
    # __latest__ version.  This is to keep the implementation simple.
    local name=$(echo $full_id | sed -e 's/\(.*\)-[0123456789].*/\1/')
    local version=$(echo $full_id | sed -e 's/.*-\([0123456789].*\)/\1/')
    local search_path="/$name/$version/"
    [[ $version == $name ]] && { version=''; search_path="/$name/"; }

    _echo "searching for ${search_path} in the hackage db: ${HOZ_ALL_CABAL_HASHES}"
    in_tar=$(tar -tzvf $HOZ_ALL_CABAL_HASHES \
        | grep $search_path \
        | grep '\.cabal' \
        | sed -e 's/.*\(all-cabal-hashes.*cabal\)$/\1/' \
        | tail -n 1)
    [[ -z $in_tar ]] && { _echo "unknown cabal package: $pkg_uri"; return 1; }
    _echo "found: $in_tar for $pkg_uri"

    # Extract the cabal file and use that with cabal2nix
    tar -xvf $HOZ_ALL_CABAL_HASHES $in_tar >> /dev/null
    local unpacked_path="file://$(pwd)/${in_tar}"
    local unpacked_root=$(pwd)/${in_tar%%/*}
    export HOME=$unpacked_root
    trap "rm -fR $unpacked_root" RETURN
    [[ $version == '' ]] && {
        local layer1=${in_tar#*/}
        local layer2=${layer1#*/}
        _echo "*warning* no version specified for ${name}; using ${layer2}"
        _echo "*warning* ${layer2} may not be the most recent version"
        _echo "*warning* specify ${name} with a version if this not OK"
    }
    _save_cabal2nix $unpacked_path "$@"
}

_list_overrides() {
    [[ -d './nix/git-json' ]] && {
        echo "Git JSON"
        echo
        ls -1 ./nix/git-json
        echo
    }
    [[ -d './nix/nix-expr' ]] && {
        echo "Nix exprs"
        echo
        ls -1 ./nix/nix-expr
        echo
    }
    return 0
}

_ensure_parent_dir() {
    local path=$1
    mkdir -p $(dirname $path)
}

_maybe_add_options() {
    [[ -z ${HOZ_OPTS:-''} ]] && return 0
    local project=${1:-''}
    [[ -z $project ]] && return 0
    local hoz_opts_array=(${HOZ_OPTS//:/ })
    for opt_name in ${hoz_opts_array[@]}
    do
        local used=0
        for known_opt in $KNOWN_OPTS
        do
            [[ $opt_name == $known_opt ]] && {
                _add_option $opt_name $project
                used=1
            }
        done
        (( used == 0)) && _echo "ignored unrecognized option: $opt_name"
    done
}

_add_option() {
    local opt_name=${1:-''}
    local project=${2:-''}
    [[ -z $project ]] && { >&2 _show_usage; return 1; }
    local out="$(pwd)/nix/options/${opt_name}"
    _ensure_parent_dir $out
    [[ -f $out ]] || { echo $project >> $out ; return 0; }
    sed -i'' -e "/${project}\$/d" $out
    echo $project >> $out
    _echo "configured option $opt_name for $project"
}

_maybe_remove_option() {
    local project=${1:-''}
    [[ -z $project ]] && return 0
    for opt_name in $KNOWN_OPTS
    do
        local out="$(pwd)/nix/options/${opt_name}"
        [[ -f $out ]] && sed -i'' -e "/${project}$/d" $out
    done
}

_echo() {
  >&2 echo "haskell-overridez: $@"
}

haskell-overridez "$@"
